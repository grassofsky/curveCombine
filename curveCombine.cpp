// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "curveCombine.h"

void CurveCombineUI::cb_tree_i(Mytree* o, void*) {
    Mytree* tree = ((Mytree *)o);
    std::string tmpFilename, clickedFilename;
    Fl_Tree_Item *clickedItem = (Fl_Tree_Item*)tree->callback_item();
    clickedFilename = const_cast<char*>(clickedItem->label());
    int i = 0;
    if (tree->callback_reason() == FL_TREE_REASON_SELECTED) {
        for (Fl_Tree_Item *item = tree->first(); item && i < 7; item = tree->next(item), ++i)
        {
            tmpFilename = const_cast<char*>(item->label());
            if (clickedFilename == tmpFilename) {
                tree->whichClicked = i-1;
                plotBox->redraw();
            }
        }
    };
}
void CurveCombineUI::cb_tree(Mytree* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_tree_i(o,v);
}

void CurveCombineUI::cb_btnClear_i(Fl_Button*, void*) {
    plotBox->iniValues();
    tree->clear();
    tree->redraw();
    plotBox->redraw();
}
void CurveCombineUI::cb_btnClear(Fl_Button* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_btnClear_i(o,v);
}

void CurveCombineUI::cb_btnExe_i(Fl_Button*, void*) {
    plotBox->addLines();
    plotBox->redraw();
}
void CurveCombineUI::cb_btnExe(Fl_Button* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_btnExe_i(o,v);
}

void CurveCombineUI::cb_btnReset_i(Fl_Button*, void*) {
    edtXLeft->value("");
    edtYLeft->value("");
    edtXCross->value("");
    edtYCross->value("");
    edtXRight->value("");
    edtYRight->value("");
    plotBox->resetValues();
    plotBox->redraw();
}
void CurveCombineUI::cb_btnReset(Fl_Button* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_btnReset_i(o,v);
}

void CurveCombineUI::cb_edtYLow_i(Fl_Float_Input*, void*) {
    plotBox->yLimitChanged = true;
    plotBox->redraw();
}
void CurveCombineUI::cb_edtYLow(Fl_Float_Input* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_edtYLow_i(o,v);
}

void CurveCombineUI::cb_edtYHigh_i(Fl_Float_Input*, void*) {
    plotBox->yLimitChanged = true;
    plotBox->redraw();
}
void CurveCombineUI::cb_edtYHigh(Fl_Float_Input* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_edtYHigh_i(o,v);
}

void CurveCombineUI::cb_sldX_i(Fl_Value_Slider* o, void*) {
    plotBox->moveX(o->value());
    plotBox->redraw();
}
void CurveCombineUI::cb_sldX(Fl_Value_Slider* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_sldX_i(o,v);
}

void CurveCombineUI::cb_sldY_i(Fl_Value_Slider* o, void*) {
    plotBox->moveY(-(o->value()));
    plotBox->redraw();
}
void CurveCombineUI::cb_sldY(Fl_Value_Slider* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_sldY_i(o,v);
}

void CurveCombineUI::cb_btnSave_i(Fl_Button*, void*) {
    Fl_Native_File_Chooser fnfc;
    fnfc.title("Save File As");
    fnfc.filter("CSV file\t*.csv\n");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
    switch (fnfc.show()) {
        case -1: printf("ERROR: %s\n", fnfc.errmsg()); break;
        case 1: printf("CANCEL\n"); break;
        default: plotBox->saveResult(fnfc.filename());
    };
}
void CurveCombineUI::cb_btnSave(Fl_Button* o, void* v) {
    ((CurveCombineUI*)(o->parent()->user_data()))->cb_btnSave_i(o,v);
}

CurveCombineUI::CurveCombineUI() {
    { mainWindow = new Fl_Double_Window(799, 510);
        mainWindow->user_data((void*)(this));
        { tree = new Mytree(10, 10, 640, 85);
            tree->box(FL_DOWN_BOX);
            tree->color(FL_BACKGROUND2_COLOR);
            tree->selection_color(FL_SELECTION_COLOR);
            tree->labeltype(FL_NORMAL_LABEL);
            tree->labelfont(0);
            tree->labelsize(14);
            tree->labelcolor(FL_FOREGROUND_COLOR);
            tree->callback((Fl_Callback*)cb_tree);
            tree->align(Fl_Align(FL_ALIGN_TOP));
            tree->when(FL_WHEN_CHANGED);
        } // Mytree* tree
        { plotBox = new PlotBox(40, 100, 610, 360);
            plotBox->box(FL_FLAT_BOX);
            plotBox->color(FL_BACKGROUND2_COLOR);
            plotBox->selection_color(FL_BACKGROUND2_COLOR);
            plotBox->labeltype(FL_NORMAL_LABEL);
            plotBox->labelfont(0);
            plotBox->labelsize(14);
            plotBox->labelcolor(FL_FOREGROUND_COLOR);
            plotBox->align(Fl_Align(FL_ALIGN_CENTER));
            plotBox->when(FL_WHEN_RELEASE);
        } // PlotBox* plotBox
        { btnClear = new Fl_Button(660, 15, 60, 25, "Clear All");
            btnClear->callback((Fl_Callback*)cb_btnClear);
        } // Fl_Button* btnClear
        { Fl_Box* o = new Fl_Box(655, 49, 30, 16, "Left");
            o->box(FL_FLAT_BOX);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(647, 74, 45, 16, "Cross");
            o->box(FL_FLAT_BOX);
            o->hide();
            o->deactivate();
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(655, 98, 30, 16, "Right");
            o->box(FL_FLAT_BOX);
        } // Fl_Box* o
        { edtXLeft = new Fl_Float_Input(690, 45, 50, 23);
            edtXLeft->type(1);
        } // Fl_Float_Input* edtXLeft
        { edtYLeft = new Fl_Float_Input(745, 45, 50, 23);
            edtYLeft->type(1);
        } // Fl_Float_Input* edtYLeft
        { edtXCross = new Fl_Float_Input(690, 70, 50, 23);
            edtXCross->type(1);
            edtXCross->hide();
            edtXCross->deactivate();
        } // Fl_Float_Input* edtXCross
        { edtYCross = new Fl_Float_Input(745, 70, 50, 23);
            edtYCross->type(1);
            edtYCross->hide();
            edtYCross->deactivate();
        } // Fl_Float_Input* edtYCross
        { edtXRight = new Fl_Float_Input(690, 94, 50, 23);
            edtXRight->type(1);
        } // Fl_Float_Input* edtXRight
        { edtYRight = new Fl_Float_Input(745, 94, 50, 23);
            edtYRight->type(1);
        } // Fl_Float_Input* edtYRight
        { btnExe = new Fl_Button(660, 120, 60, 25, "Exe");
            btnExe->callback((Fl_Callback*)cb_btnExe);
        } // Fl_Button* btnExe
        { btnReset = new Fl_Button(725, 120, 60, 25, "Reset");
            btnReset->callback((Fl_Callback*)cb_btnReset);
        } // Fl_Button* btnReset
        { Fl_Box* o = new Fl_Box(660, 179, 30, 16, "YLim");
            o->box(FL_FLAT_BOX);
        } // Fl_Box* o
        { edtYLow = new Fl_Float_Input(696, 177, 45, 23);
            edtYLow->type(1);
            edtYLow->callback((Fl_Callback*)cb_edtYLow);
            edtYLow->value("-50");
        } // Fl_Float_Input* edtYLow
        { edtYHigh = new Fl_Float_Input(746, 177, 45, 23);
            edtYHigh->type(1);
            edtYHigh->callback((Fl_Callback*)cb_edtYHigh);
            edtYHigh->value("-10");
        } // Fl_Float_Input* edtYHigh
        { btnYLim = new Fl_Button(660, 205, 60, 25, "Set YLim");
        } // Fl_Button* btnYLim
        { sldX = new Fl_Value_Slider(40, 470, 610, 25, "x");
            sldX->type(1);
            sldX->textsize(14);
            sldX->callback((Fl_Callback*)cb_sldX);
            sldX->deactivate();
        } // Fl_Value_Slider* sldX
        { sldY = new Fl_Value_Slider(10, 105, 25, 355, "Y");
            sldY->textsize(14);
            sldY->callback((Fl_Callback*)cb_sldY);
            sldY->deactivate();
        } // Fl_Value_Slider* sldY
        { btnSave = new Fl_Button(660, 250, 60, 25, "Save");
            btnSave->callback((Fl_Callback*)cb_btnSave);
        } // Fl_Button* btnSave
        { bxXY = new Fl_Box(660, 474, 80, 16, "x,y");
            bxXY->hide();
        } // Fl_Box* bxXY
        mainWindow->end();
    } // Fl_Double_Window* mainWindow
}

void CurveCombineUI::show(int argc, char **argv) {
    mainWindow->show(argc, argv);
}
